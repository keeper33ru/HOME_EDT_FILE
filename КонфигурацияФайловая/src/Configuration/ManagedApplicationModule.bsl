Процедура ПриНачалеРаботыСистемы()
		
		ОткрытьФорму("Обработка.РаботаСHTTP.Форма.Форма");
	
//1 ЗАДАЧА
	
	ДатаСтрокой = "01.03.2023";
	
	ПолученныйДеньНедели = ДеньНеделиПоДате(ДатаСтрокой);
	
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ПолученныйДеньНедели;
	//Сообщение.Сообщить();
	
//2 ЗАДАЧА
	
	Билет = "221 212";
	//
	РезультатПроверкиБилета = ЭтоСчастливыйБилетик(Билет);
	//
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = РезультатПроверкиБилета;
	//Сообщение.Сообщить();
	
//3 ЗАДАЧА

	ЗначениеЧислаПоследовательности = ПолучитьЗначениеЧислаПоследовательностиФибоначчи(5);
	//
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ЗначениеЧислаПоследовательности;
	//Сообщение.Сообщить();
	
//4 ЗАДАЧА

	Словарь = "Монастырь монастырь МОНАСТЫРЬ МонАстырь Дерево";
	//
	Строка = "монастырь";
	//
	КоличествоВхождений = ЧислоВхожденийСтроки(Словарь,Строка);
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = КоличествоВхождений;
	//Сообщение.Сообщить(); 	

//5 ЗАДАЧА

	Адрес = "vitalyevdokimov@mail.ru";
	//
	ПроверкаВалидацииАдреса = ВалидацияПройдена(Адрес);
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ПроверкаВалидацииАдреса;
	//Сообщение.Сообщить();	

//6 ЗАДАЧА

	Массив = Новый Массив;
	Массив.Добавить(3);
	Массив.Добавить(2);
	Массив.Добавить(2);	
	Массив.Добавить(4);
	Массив.Добавить(5);
	//
	ПроверкаМассиваНаСортировку = МассивОтсортирован(Массив);
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ПроверкаМассиваНаСортировку;
	//Сообщение.Сообщить();
	
//7 ЗАДАЧА

	Массив = Новый Массив;
	
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(1);
	Массив.Добавить(1);
	Массив.Добавить(2);
	Массив.Добавить(5);
	Массив.Добавить(6);
	Массив.Добавить(1);
	Массив.Добавить(2);
	
	ПопулярныйЭлемент = ПолучитьСамыйПопулярныйЭлементВМассиве(Массив);
	//	
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ПопулярныйЭлемент;
	//Сообщение.Сообщить();
	
//8 ЗАДАЧА 

	Сумма = СуммаСтроки("МАМА");
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = Сумма;
	//Сообщение.Сообщить();	
	
	
//9 ЗАДАЧА

	Массив = Новый Массив;
	Массив.Добавить(1);
	Массив.Добавить(1);
	Массив.Добавить(2);	
	Массив.Добавить(2);
	Массив.Добавить(1);
	
	МассивБезДублей = ПолучитьМножествоИзМассива(Массив);
	
КонецПроцедуры
	



#Область ФункцияЗадачи1
    // Реализовать функцию, которая возвращает по переданной дате день недели
    // "пн" = ДеньНеделиПоДате("01.05.2023")
    // "вт" = ДеньНеделиПоДате("02.05.2023")	

Функция ДеньНеделиПоДате(ДатаСтрокой)	
	
	Сообщение = "Дата должна быть задана строкой в формате дд.мм.гггг";
	
	Если Не ТипЗнч(ДатаСтрокой) = Тип("Строка") ИЛИ Не СтрЧислоВхождений(ДатаСтрокой,".") = 2 Тогда
		Возврат Сообщение //будет работать и так, но нужно везде не забывать ставить ";"
	КонецЕсли;	
	
	
	МассивЭлементовДаты = СтрРазделить(ДатаСтрокой,".");
	
	День = МассивЭлементовДаты[0];
	Месяц = МассивЭлементовДаты[1];
	Год = МассивЭлементовДаты[2];
	
	Если День = "" ИЛИ Месяц = "" ИЛИ Год = "" Тогда
		Возврат Сообщение //будет работать и так, но нужно везде не забывать ставить ";"
	КонецЕсли;
	
	Дата = Дата(Год,Месяц,День);		
	
	Если ДеньНедели(Дата) = 1 Тогда
		ДеньНеделиСтрокой = "пн";
	ИначеЕсли ДеньНедели(Дата) = 2 Тогда 
		ДеньНеделиСтрокой = "вт";
	ИначеЕсли ДеньНедели(Дата) = 3 Тогда 
		ДеньНеделиСтрокой = "ср";
	ИначеЕсли ДеньНедели(Дата) = 4 Тогда 
		ДеньНеделиСтрокой = "чт";
	ИначеЕсли ДеньНедели(Дата) = 5 Тогда 
		ДеньНеделиСтрокой = "пт";
	ИначеЕсли ДеньНедели(Дата) = 6 Тогда 
		ДеньНеделиСтрокой = "сб";
	ИначеЕсли ДеньНедели(Дата) = 7 Тогда 
		ДеньНеделиСтрокой = "вс";
	КонецЕсли;
	
Возврат ДеньНеделиСтрокой   //будет работать и так, но нужно везде не забывать ставить ";"
		
КонецФункции
	
    
#КонецОбласти

#Область ФункцияЗадачи2
	// счастливый билетик - это билет, у которого сумма первых трёх чисел
	// равна сумме вторых трёх чисел
	// Реализовать функцию ЭтоСчастливыйБилетик, проверяющего счастливый билет или нет
	// Пример счастливого билета 625256 ( 6 + 2 + 5 = 2 + 5 + 6)
	// Истина = ЭтоСчастливыйБилетик("625526")

Функция ЭтоСчастливыйБилетик(Билет)
		
	Билет = СтрЗаменить(Билет," ","");
	
	Если НЕ СтрДлина(Билет) = 6 Тогда
		Возврат Ложь 
	КонецЕсли;
	
	//МассивЦифрЧисла = Новый Массив;
	
	//Счетчик = 5;
	//в цикле идёт неоправданное изменение значения строковой переменной Билет в памяти	
	//Пока НЕ СтрДлина(Билет) = 0 Цикл
	//	
	//	МассивЦифрЧисла.Добавить(Лев(Билет,1));
	//	Билет = Прав(Билет,Счетчик);
	//	
	//	Счетчик = Счетчик - 1;
	//	
	//КонецЦикла;     
	
	//++
	//вариант без изменения значения переменной Билет в памяти:
	
	МассивЦифрЧисла = Новый Массив;
	
	Для Счетчик = 1 По СтрДлина(Билет) Цикл
		
		МассивЦифрЧисла.Добавить(Сред(Билет,Счетчик,1));	
	
	КонецЦикла;
	
	//--
	
	СуммаПервойТройки = 0;
	СуммаВторойТройки = 0; 
	
	Для Индекс = 0 По 2 Цикл
		СуммаПервойТройки = СуммаПервойТройки + Число(МассивЦифрЧисла[Индекс]);
	КонецЦикла;
	
	Для Индекс = 3 По 5 Цикл
		СуммаВторойТройки = СуммаВторойТройки + Число(МассивЦифрЧисла[Индекс]);
	КонецЦикла;
	
	Если СуммаПервойТройки = СуммаВторойТройки Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;	
		
КонецФункции
		
	
	
	
	


#КонецОбласти

#Область ФункцияЗадачи3
	// Числа Фибоначчи - элементы числовой последовательности, в которой первые два числа равны 0 и 1,
	// а каждое последующее число равно сумме двух предыдущих чисел
	// Реализуйте функцию, которая рассчитывает N-е число последовательности
	// 1 = Фибоначчи(3)
	// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144
	
Функция ПолучитьЗначениеЧислаПоследовательностиФибоначчи(НомерЧисла)
    
    Если НЕ ТипЗнч(НомерЧисла) = Тип("Число") Тогда
        Возврат "Передаваемое значение не является числом"
    КонецЕсли;
    
    Если НомерЧисла < 0 Тогда
        Возврат "Передаваемое значение не может быть отрицательным"
    КонецЕсли;
    
    
    МассивЧисел = Новый Массив;
    
    МассивЧисел.Добавить(0);
    МассивЧисел.Добавить(1);
    
    
    Для Индекс = 2 По НомерЧисла Цикл  
        ЧислоПоследовательности = МассивЧисел[Индекс-2] + МассивЧисел[Индекс-1];
        МассивЧисел.Добавить(ЧислоПоследовательности);    
    КонецЦикла;
    
    Возврат МассивЧисел[НомерЧисла-1]

КонецФункции
	
	
#КонецОбласти

#Область ФункцияЗадачи4
	// В строке находится словарь Ожегова
	// Требуется реализовать функцию, которая осуществляет поиск количества вхождений в словаре переданной строки
	// регистр слов учитываться не должен
	// ЧислоВхожденийСтроки("монастырь") = 2
	// TODO реализовать функционал
	
Функция ЧислоВхожденийСтроки(Словарь, ИскомаяСтрока)
		
	Если Не ТипЗнч(Словарь) = Тип("Строка") ИЛИ Не ТипЗнч(ИскомаяСтрока) = Тип("Строка") Тогда
		Возврат "Словарь/Искомая строка должны быть заданы в формате строки"
	КонецЕсли;

	КоличествоВхожденийСтрокиВСловаре = СтрЧислоВхождений(НРег(Словарь), НРег(ИскомаяСтрока));
	
	Возврат КоличествоВхожденийСтрокиВСловаре	
	
КонецФункции
	
#КонецОбласти

#Область ФункцияЗадачи5
    // Реализуйте функцию проверки формата e-mail адреса
    // Истина = ВалидацияПройдена("a.plastinin@gmail.com")
    // Ложь = ВалидацияПройдена("что здесь происходит?")
    // Ложь = ВалидацияПройдена("а.пластинин@почта@.com?")	
	
Функция ВалидацияПройдена(Адрес)
	
	//Проверка типа передаваемого значения
	Если Не ТипЗнч(Адрес) = Тип("строка") Тогда
		Возврат Ложь
	КонецЕсли;
	
	//Приведение адреса к верхнему регистру
	Адрес = ВРег(Адрес);
		
	//Проверка адреса на количество вхождений собаки
	Если Не СтрЧислоВхождений(Адрес,"@") = 1 Тогда
		Возврат Ложь
	КонецЕсли;
	
	МассивРазбитияАдреса = СтрРазделить(Адрес,"@");	
	Логин = МассивРазбитияАдреса[0]; 
	Домен = МассивРазбитияАдреса[1];
	
	Если Не СтрЧислоВхождений(Домен,".") = 1 Тогда
		Возврат Ложь
	КонецЕсли;
	
	МассивРазбитияДомена = СтрРазделить(Домен,".");
	Префикс = МассивРазбитияДомена[0]; 
	Постфикс = МассивРазбитияДомена[1]; 		
		
	//Проверка на пустоту частей адреса
	Если Логин = "" ИЛИ Домен = "" ИЛИ Префикс = "" ИЛИ Постфикс = "" Тогда
		Возврат Ложь
	КонецЕсли;	
	
	ДопустимыеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯQWERTYUIOPASDFGHJKLZXCVBNM0123456789-_.!~*'()";
	НедопустимыеСимволыПервогоЗнака = "0123456789-_.!~*'()";  
	
	//Проверка первого символа Логина, Префикса и Постфикса Домена на допустимые символы	
	Если Не СтрНайти(НедопустимыеСимволыПервогоЗнака, Лев(Логин,1)) = 0
		ИЛИ Не СтрНайти(НедопустимыеСимволыПервогоЗнака, Лев(Префикс,1)) = 0 
		ИЛИ Не СтрНайти(НедопустимыеСимволыПервогоЗнака, Лев(Постфикс,1)) = 0 Тогда
		Возврат Ложь
	КонецЕсли;
	
	СчетчикСтрокиЛогина = СтрДлина(Логин) - 1;
	
	//Проверка Логина на допустимые символы	
	Пока НЕ СтрДлина(Логин) = 0 Цикл
		БукваЛогина = Лев(Логин,1);
		Если СтрНайти(ДопустимыеСимволы,БукваЛогина) = 0 Тогда
			Возврат Ложь
		Иначе
			СчетчикСтрокиЛогина = СчетчикСтрокиЛогина - 1;
			Логин = Прав(Логин,СчетчикСтрокиЛогина); 
		КонецЕсли;
	КонецЦикла; 

	СчетчикСтрокиДомена = СтрДлина(Домен) - 1;
	
	//Проверка Домена на допустимые символы	
	Пока НЕ СтрДлина(Домен) = 0 Цикл
		БукваДомена = Лев(Домен,1);
		Если СтрНайти(ДопустимыеСимволы,БукваДомена) = 0 Тогда
			Возврат Ложь
		Иначе
			СчетчикСтрокиДомена = СчетчикСтрокиДомена - 1;
			Домен = Прав(Домен,СчетчикСтрокиДомена); 
		КонецЕсли;
	КонецЦикла; 	

Возврат Истина	
	
КонецФункции
	
	
	
#КонецОбласти

#Область ФункцияЗадачи6
	// создайте функцию, которая проверит сортировку значений в переданном массиве
	// Направление сортировки - Возрастание
	// Истина = МассивОтсортирован([1,1,2,4,6])
	// Ложь = МассивОтсортирован([4,1,6,4,6])
	// Истина = МассивОтсортирован([а,б,в,д])
	
Функция МассивОтсортирован(Массив)
	
	Если Не ТипЗнч(Массив) = Тип("массив") Тогда     //не стоит называть переменные названиями встроенных процедур, функций, типов значений. имя должно быть говорящим, например "МассивДляПроверкиСортировки"
		Возврат "Передаваемое значение не является массивом"
	КонецЕсли;                                               
	
	Если Массив.Количество() = 0 Тогда
		Возврат "Добавьте хотя бы 1 элемент в массив"
	КонецЕсли;	
	
	Результат = Истина;	
	
	Индекс = 0;

	КоличествоЭлементовМассива = Массив.Количество();
	
	Пока Индекс <> КоличествоЭлементовМассива - 1 Цикл
		Если Массив[Индекс] > Массив[Индекс+1] Тогда
			Результат = Ложь;
			Возврат Результат;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	//++
	//вариант с сортировкой через список значений
	//но работает дольше и тратит больше памяти
	//получаем отсортированный массив
	СписокЗначенийИзМассива = Новый СписокЗначений;
	СписокЗначенийИзМассива.ЗагрузитьЗначения(Массив);
	СписокЗначенийИзМассива.СортироватьПоЗначению();
	ОтсортированныйМассив = СписокЗначенийИзМассива.ВыгрузитьЗначения();
	
	// Проверяем на равенство элементы с одинаковым индексом
	Для Индекс = 0 По КоличествоЭлементовМассива-1 Цикл	
		Если ОтсортированныйМассив[Индекс] <> Массив[Индекс] Тогда
		    //после первой же непройденной проверке делаем возврат
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;
	//--
	
Возврат Результат;	
	
КонецФункции
	
#КонецОбласти

#Область ФункцияЗадачи7
	// Создайте функцию, которая определит самый популярный элемент в массиве
	// 1 = ПолучитьСамыйПопулярныйЭлементВМассиве([1,2,3,3,1,1,4,5,6])
	
Функция ПолучитьСамыйПопулярныйЭлементВМассиве(Массив)
	
	Если Не ТипЗнч(Массив) = Тип("массив") Тогда
		Возврат "Передаваемое значение не является массивом"
	КонецЕсли;                                               
	
	Если Массив.Количество() = 0 Тогда
		Возврат "Добавьте хотя бы 1 элемент в массив"
	КонецЕсли; 
	
	//++ вариант решения без вложенных циклов. вложенные циклы сложнее для восприятия кода, если есть возможность, то их лучше избегать
	СоответствиеПопулярностиЧисел = Новый Соответствие;
	Для Каждого Элемент ИЗ Массив Цикл
		
		ЗначениеЭлеменаСтруктуры = СоответствиеПопулярностиЧисел.Получить(Элемент);
		Если СоответствиеПопулярностиЧисел.Получить(Элемент) = Неопределено Тогда
			
			СоответствиеПопулярностиЧисел.Вставить(Элемент,1);
		Иначе
			СоответствиеПопулярностиЧисел.Вставить(Элемент,ЗначениеЭлеменаСтруктуры + 1);			
		КонецЕсли;
		
	КонецЦикла;
	
	МаксимальноеКоличествоВхождений = 0; 
	
	Для Каждого ЭлементСоответствия ИЗ СоответствиеПопулярностиЧисел Цикл
		Если ЭлементСоответствия.Значение > МаксимальноеКоличествоВхождений Тогда
			МаксимальноеКоличествоВхождений = ЭлементСоответствия.Значение;
			СамыйПопулярныйЭлемент = ЭлементСоответствия.Ключ;  
		КонецЕсли;		
	КонецЦикла;
	
	//--

	
	Макс = 1;
    Счетчик = 1;
    
    Для Индекс1 = 0 По Массив.Количество() - 1 Цикл
        Счетчик = 1;
        Для Индекс2 = 1 По Массив.Количество() - 1 Цикл
            Если Массив[Индекс1] = Массив[Индекс2] Тогда
                Счетчик = Счетчик + 1;
            КонецЕсли;
            Если Счетчик > Макс Тогда
                Макс = Счетчик;
                Число = Массив[Индекс1];
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
    Возврат Число;
       
КонецФункции

#КонецОбласти

#Область ФункцияЗадачи8
	// А - 1, Б - 2, В - 3
	//Реализовать функцию, которая осуществляет расчет переданной строки
	// 30 = СуммаСтроки("Мама")
	//Функция СуммаСтроки(Строка)
	//    Алфафит = " АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
	//    
	//    Возврат 0;    
	//КонецФункции 

Функция СуммаСтроки(Строка)
	СтрокаДляПоиска = Строка;
	Если Не ТипЗнч(Строка) = Тип("строка") Тогда
		Возврат "Передаваемое значение не является строкой"
	КонецЕсли; 
	
	Алфавит = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"; 
	МойАлфавит = Алфавит;
	СчетчикАлфавит = СтрДлина(Алфавит);
	
	МассивБуквАлфавита = Новый Массив;    
	
	Пока НЕ СтрДлина(Алфавит) = 0 Цикл	
		МассивБуквАлфавита.Добавить(Лев(Алфавит,1));
		Алфавит = Прав(Алфавит,СчетчикАлфавит);
		
		СчетчикАлфавит = СчетчикАлфавит - 1;	
	КонецЦикла;
	
	МассивБуквАлфавита.Установить(0, Неопределено);
	
	Строка = ВРег(Строка);
	СчетчикСтрока = СтрДлина(Строка) - 1;
	
	МассивБуквСтроки = Новый Массив; 
	
	Пока НЕ СтрДлина(Строка) = 0 Цикл	
		МассивБуквСтроки.Добавить(Лев(Строка,1));
		Строка = Прав(Строка,СчетчикСтрока);
		
		СчетчикСтрока = СчетчикСтрока - 1;	
	КонецЦикла; 
	
	СуммаБукв = 0;
	
	Для каждого Буква Из МассивБуквСтроки Цикл
		СуммаБукв = СуммаБукв + МассивБуквАлфавита.Найти(Буква); 				
	КонецЦикла;	
	
	//++вариант суммирования:
	СуммаБукв = 0;
	Для ПорядокЭлементаВСтроке = 1 По СтрДлина(СтрокаДляПоиска) Цикл
		СуммаБукв = СуммаБукв + СтрНайти(МойАлфавит,ВРег(Сред(СтрокаДляПоиска,ПорядокЭлементаВСтроке,1)));	
	КонецЦикла;
	//--

		
	Возврат СуммаБукв; 
	
КонецФункции 
	
#КонецОбласти

#Область ФункцияЗадачи9
	// создайте функцию, которая удаляет дубликаты элементов в массиве
	// [1,2] = ПолучитьМножествоИзМассива([1,1,2,2,1])
	
Функция ПолучитьМножествоИзМассива(Массив)
	
	Если Не ТипЗнч(Массив) = Тип("массив") Тогда
		Возврат "Передаваемое значение не является массивом"
	КонецЕсли;                                               
	
	Если Массив.Количество() = 0 Тогда
		Возврат "Добавьте хотя бы 1 элемент в массив"
	КонецЕсли;	      
	
	
	//++ вариант решения без вложенного цикла, с использованием списка значений    

	СписокЗначенийМножества = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива ИЗ Массив Цикл 
		Если СписокЗначенийМножества.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
			 СписокЗначенийМножества.Добавить(ЭлементМассива);
		КонецЕсли;		
	КонецЦикла;
	
	МассивМножества = СписокЗначенийМножества.ВыгрузитьЗначения();
	
	//--
		
	Индекс1 = 0;	
	КоличествоЭлементовМассива = Массив.Количество();
	
	Пока Индекс1 < КоличествоЭлементовМассива Цикл 
		Индекс2 = Индекс1 + 1; 
		Пока Индекс2 < КоличествоЭлементовМассива Цикл 
			Если Массив[Индекс1] = Массив[Индекс2] Тогда 
				Массив.Удалить(Индекс2); 
				КоличествоЭлементовМассива = КоличествоЭлементовМассива - 1; 
			Иначе 
				Индекс2 = Индекс2 + 1; 
			КонецЕсли; 
		КонецЦикла; 
		Индекс1 = Индекс1 + 1; 
	КонецЦикла; 
	Возврат Массив; 
	
КонецФункции
	
#КонецОбласти


#Область Задача1
	// Реализовать функцию, которая возвращает по переданной дате день недели
	// "пн" = ДеньНеделиПоДате("01.05.2023")
	// "вт" = ДеньНеделиПоДате("02.05.2023")
	
#КонецОбласти

#Область Задача2
// счастливый билетик - это билет, у которого сумма первых трёх чисел
// равна сумме вторых трёх чисел
// Реализовать функцию ЭтоСчастливыйБилетик, проверяющего счастливый билет или нет
// Пример счастливого билета 625256 ( 6 + 2 + 5 = 2 + 5 + 6)
// Истина = ЭтоСчастливыйБилетик("625526")
#КонецОбласти

#Область Задача3
// Числа Фибоначчи - элементы числовой последовательности, в которой первые два числа равны 0 и 1,
// а каждое последующее число равно сумме двух предыдущих чисел
// Реализуйте функцию, которая рассчитывает N-е число последовательности
// 1 = Фибоначчи(3)
#КонецОбласти

#Область Задача4
// В строке находится словарь Ожегова
// Требуется реализовать функцию, которая осуществляет поиск количества вхождений в словаре переданной строки
// регистр слов учитываться не должен
// ЧислоВхожденийСтроки("монастырь") = 2
// TODO реализовать функционал
#КонецОбласти

#Область Задача5
	// Реализуйте функцию проверки формата e-mail адреса
	// Истина = ВалидацияПройдена("a.plastinin@gmail.com")
	// Ложь = ВалидацияПройдена("что здесь происходит?")
	// Ложь = ВалидацияПройдена("а.пластинин@почта@.com?")
#КонецОбласти

#Область Задача6
// создайте функцию, которая проверит сортировку значений в переданном массиве
// Направление сортировки - Возрастание
// Истина = МассивОтсортирован([1,1,2,4,6])
// Ложь = МассивОтсортирован([4,1,6,4,6])
// Истина = МассивОтсортирован([а,б,в,д])
#КонецОбласти

#Область Задача7
// Создайте функцию, которая определит самый популярный элемент в массиве
// 1 = ПолучитьСамыйПопулярныйЭлементВМассиве([1,2,3,3,1,1,4,5,6])
#КонецОбласти

#Область Задача8
// А - 1, Б - 2, В - 3
//Реализовать функцию, которая осуществляет расчет переданной строки
// 30 = СуммаСтроки("Мама")
//Функция СуммаСтроки(Строка)
//	Алфафит = " АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
//	
//	Возврат 0;	
//КонецФункции

#КонецОбласти

#Область Задача9
// создайте функцию, которая удаляет дубликаты элементов в массиве
// [1,2] = ПолучитьМножествоИзМассива([1,1,2,2,1])
#КонецОбласти